// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/proto/common/java/StatusType.proto

package com.wn.protocol.common;

public final class LCStatusType {
  private LCStatusType() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code StatusType}
   */
  public enum StatusType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>dpFirst = 0;</code>
     */
    dpFirst(0),
    /**
     * <code>dpfPressure = 1;</code>
     */
    dpfPressure(1),
    /**
     * <code>relativePressure = 2;</code>
     */
    relativePressure(2),
    /**
     * <code>intakeAirTem = 3;</code>
     */
    intakeAirTem(3),
    /**
     * <code>absolutePressure = 4;</code>
     */
    absolutePressure(4),
    /**
     * <code>exhaustTem = 5;</code>
     */
    exhaustTem(5),
    /**
     * <code>atmosphericPressure = 6;</code>
     */
    atmosphericPressure(6),
    /**
     * <code>engineTem = 7;</code>
     */
    engineTem(7),
    /**
     * <code>atmosphericTem = 8;</code>
     */
    atmosphericTem(8),
    /**
     * <code>pavementTem = 9;</code>
     */
    pavementTem(9),
    /**
     * <code>lampStatus = 10;</code>
     */
    lampStatus(10),
    /**
     * <code>mileage = 11;</code>
     */
    mileage(11),
    /**
     * <code>waterInOilStatus = 12;</code>
     */
    waterInOilStatus(12),
    /**
     * <code>oilValue = 14;</code>
     */
    oilValue(14),
    /**
     * <code>rotation = 15;</code>
     */
    rotation(15),
    /**
     * <code>fuelPressure = 16;</code>
     */
    fuelPressure(16),
    /**
     * <code>oilLevel = 17;</code>
     */
    oilLevel(17),
    /**
     * <code>oilPressure = 18;</code>
     */
    oilPressure(18),
    /**
     * <code>coolantLevel = 19;</code>
     */
    coolantLevel(19),
    /**
     * <code>coolingWaterTem = 20;</code>
     */
    coolingWaterTem(20),
    /**
     * <code>fuelTem = 21;</code>
     */
    fuelTem(21),
    /**
     * <code>oilTem = 22;</code>
     */
    oilTem(22),
    /**
     * <code>ureaTankLiquidLevel = 23;</code>
     */
    ureaTankLiquidLevel(23),
    /**
     * <code>ureaTankTem = 24;</code>
     */
    ureaTankTem(24),
    /**
     * <code>cumulativeRunningTime = 25;</code>
     */
    cumulativeRunningTime(25),
    /**
     * <code>cumulativeTurningNumber = 26;</code>
     */
    cumulativeTurningNumber(26),
    /**
     * <code>fuelConsumptionRate = 27;</code>
     */
    fuelConsumptionRate(27),
    /**
     * <code>averageFuelConsumption = 28;</code>
     */
    averageFuelConsumption(28),
    /**
     * <code>dayFuelConsumption = 29;</code>
     */
    dayFuelConsumption(29),
    /**
     * <code>totalFuelConsumption = 30;</code>
     */
    totalFuelConsumption(30),
    /**
     * <code>engineTorMode = 31;</code>
     */
    engineTorMode(31),
    /**
     * <code>driverEnginePercentTor = 32;</code>
     */
    driverEnginePercentTor(32),
    /**
     * <code>actualEnginePercentTor = 33;</code>
     */
    actualEnginePercentTor(33),
    /**
     * <code>accPedalLowIdleSwitch = 34;</code>
     */
    accPedalLowIdleSwitch(34),
    /**
     * <code>accPedalKickdownSwitch = 35;</code>
     */
    accPedalKickdownSwitch(35),
    /**
     * <code>accPedalPos = 36;</code>
     */
    accPedalPos(36),
    /**
     * <code>percentLoadAtCurrentSpd = 37;</code>
     */
    percentLoadAtCurrentSpd(37),
    /**
     * <code>nominalFrictionPercentTrq = 38;</code>
     */
    nominalFrictionPercentTrq(38),
    /**
     * <code>parkingBrakeSwitch = 39;</code>
     */
    parkingBrakeSwitch(39),
    /**
     * <code>cruiseCtrlActive = 40;</code>
     */
    cruiseCtrlActive(40),
    /**
     * <code>brakeSwitch = 41;</code>
     */
    brakeSwitch(41),
    /**
     * <code>clutchSwitch = 42;</code>
     */
    clutchSwitch(42),
    /**
     * <code>cruiseCtrlSetSwitch = 43;</code>
     */
    cruiseCtrlSetSwitch(43),
    /**
     * <code>cruiseCtrlCoastSwitch = 44;</code>
     */
    cruiseCtrlCoastSwitch(44),
    /**
     * <code>cruiseCtrlResumeSwitch = 45;</code>
     */
    cruiseCtrlResumeSwitch(45),
    /**
     * <code>cruiseCtrlAccSwitch = 46;</code>
     */
    cruiseCtrlAccSwitch(46),
    /**
     * <code>cruiseCtrlSetSpd = 47;</code>
     */
    cruiseCtrlSetSpd(47),
    /**
     * <code>cruiseCtrlStates = 48;</code>
     */
    cruiseCtrlStates(48),
    /**
     * <code>tripDistance = 49;</code>
     */
    tripDistance(49),
    /**
     * <code>realTimeOilConsumption = 50;</code>
     */
    realTimeOilConsumption(50),
    /**
     * <code>wheelBasedVehicleSpd = 51;</code>
     */
    wheelBasedVehicleSpd(51),
    /**
     * <code>outPutRoateSpeed = 52;</code>
     */
    outPutRoateSpeed(52),
    /**
     * <code>tachographVehicleSpeed = 53;</code>
     */
    tachographVehicleSpeed(53),
    /**
     * <code>currentGear = 54;</code>
     */
    currentGear(54),
    /**
     * <code>tripFuel = 55;</code>
     */
    tripFuel(55),
    /**
     * <code>truboOilTem = 56;</code>
     */
    truboOilTem(56),
    /**
     * <code>batteryPot = 57;</code>
     */
    batteryPot(57),
    /**
     * <code>engineProtection = 58;</code>
     */
    engineProtection(58),
    /**
     * <code>P1Speed = 59;</code>
     */
    P1Speed(59),
    /**
     * <code>P1Torque = 60;</code>
     */
    P1Torque(60),
    /**
     * <code>P3Speed = 61;</code>
     */
    P3Speed(61),
    /**
     * <code>P3Torque = 62;</code>
     */
    P3Torque(62),
    /**
     * <code>P4Speed = 63;</code>
     */
    P4Speed(63),
    /**
     * <code>P4Troque = 64;</code>
     */
    P4Troque(64),
    /**
     * <code>P5Speed = 65;</code>
     */
    P5Speed(65),
    /**
     * <code>P5Torque = 66;</code>
     */
    P5Torque(66),
    /**
     * <code>P6Speed = 67;</code>
     */
    P6Speed(67),
    /**
     * <code>gainSpeed = 68;</code>
     */
    gainSpeed(68),
    /**
     * <code>RefEngineTorque = 69;</code>
     */
    RefEngineTorque(69),
    /**
     * <code>MaxSpeedLimit = 70;</code>
     */
    MaxSpeedLimit(70),
    /**
     * <code>MaxTimeLimit = 71;</code>
     */
    MaxTimeLimit(71),
    /**
     * <code>SpLowerLimit = 72;</code>
     */
    SpLowerLimit(72),
    /**
     * <code>SpUpperLimit = 73;</code>
     */
    SpUpperLimit(73),
    /**
     * <code>TorLowerLimit = 74;</code>
     */
    TorLowerLimit(74),
    /**
     * <code>TorUpperLimit = 75;</code>
     */
    TorUpperLimit(75),
    /**
     * <code>ReqSpUpperLimit = 76;</code>
     */
    ReqSpUpperLimit(76),
    /**
     * <code>MomentIner = 77;</code>
     */
    MomentIner(77),
    /**
     * <code>RelEngOilPressure = 78;</code>
     */
    RelEngOilPressure(78),
    /**
     * <code>engOilPreLow = 79;</code>
     */
    engOilPreLow(79),
    /**
     * <code>engCoolTem = 80;</code>
     */
    engCoolTem(80),
    /**
     * <code>StartHeartStat = 81;</code>
     */
    StartHeartStat(81),
    /**
     * <code>OBDLampStatus = 82;</code>
     */
    OBDLampStatus(82),
    /**
     * <code>ExOutput = 83;</code>
     */
    ExOutput(83),
    /**
     * <code>EsFanSp = 84;</code>
     */
    EsFanSp(84),
    /**
     * <code>FanDriState = 85;</code>
     */
    FanDriState(85),
    /**
     * <code>FanSpeed = 86;</code>
     */
    FanSpeed(86),
    /**
     * <code>airFilterPre = 87;</code>
     */
    airFilterPre(87),
    /**
     * <code>CoolDifferTem = 88;</code>
     */
    CoolDifferTem(88),
    /**
     * <code>AirInTem = 89;</code>
     */
    AirInTem(89),
    /**
     * <code>perTorResolution = 90;</code>
     */
    perTorResolution(90),
    /**
     * <code>addControlDevice = 91;</code>
     */
    addControlDevice(91),
    /**
     * <code>engineStartMode = 92;</code>
     */
    engineStartMode(92),
    /**
     * <code>engineDePerTor = 93;</code>
     */
    engineDePerTor(93),
    /**
     * <code>speedLimitStatus = 94;</code>
     */
    speedLimitStatus(94),
    /**
     * <code>reAccPosition = 95;</code>
     */
    reAccPosition(95),
    /**
     * <code>reAccPosition2 = 96;</code>
     */
    reAccPosition2(96),
    /**
     * <code>maxAvailableEngPerTor = 97;</code>
     */
    maxAvailableEngPerTor(97),
    /**
     * <code>desirOperaSpeed = 98;</code>
     */
    desirOperaSpeed(98),
    /**
     * <code>engAsyAdjust = 99;</code>
     */
    engAsyAdjust(99),
    /**
     * <code>EstimaParLoss = 100;</code>
     */
    EstimaParLoss(100),
    /**
     * <code>exhGasMassflow = 101;</code>
     */
    exhGasMassflow(101),
    /**
     * <code>af1Intake = 102;</code>
     */
    af1Intake(102),
    /**
     * <code>af1Exhaust = 103;</code>
     */
    af1Exhaust(103),
    /**
     * <code>af2Intake = 104;</code>
     */
    af2Intake(104),
    /**
     * <code>af2Exhaust = 105;</code>
     */
    af2Exhaust(105),
    /**
     * <code>cruPauseSwitch = 106;</code>
     */
    cruPauseSwitch(106),
    /**
     * <code>cruiControlEnable = 107;</code>
     */
    cruiControlEnable(107),
    /**
     * <code>ptoState = 108;</code>
     */
    ptoState(108),
    /**
     * <code>engShutOverSwitch = 109;</code>
     */
    engShutOverSwitch(109),
    /**
     * <code>engTestModeWwitch = 110;</code>
     */
    engTestModeWwitch(110),
    /**
     * <code>engIdleDecSwitch = 111;</code>
     */
    engIdleDecSwitch(111),
    /**
     * <code>engIdleIncSwitch = 112;</code>
     */
    engIdleIncSwitch(112),
    /**
     * <code>retarTorMode = 113;</code>
     */
    retarTorMode(113),
    /**
     * <code>retBrakeAssSwitch = 114;</code>
     */
    retBrakeAssSwitch(114),
    /**
     * <code>retShiftAssSwitch = 115;</code>
     */
    retShiftAssSwitch(115),
    /**
     * <code>actRetTorPer = 116;</code>
     */
    actRetTorPer(116),
    /**
     * <code>intRetPerTor = 117;</code>
     */
    intRetPerTor(117),
    /**
     * <code>coolLoadIncrease = 118;</code>
     */
    coolLoadIncrease(118),
    /**
     * <code>retReqBrakeLight = 119;</code>
     */
    retReqBrakeLight(119),
    /**
     * <code>addOfControDevice = 120;</code>
     */
    addOfControDevice(120),
    /**
     * <code>demRetPerTor = 121;</code>
     */
    demRetPerTor(121),
    /**
     * <code>retSwitchPerTor = 122;</code>
     */
    retSwitchPerTor(122),
    /**
     * <code>actMaxAvailableRetPerTor = 123;</code>
     */
    actMaxAvailableRetPerTor(123),
    /**
     * <code>retarderLocation = 124;</code>
     */
    retarderLocation(124),
    /**
     * <code>retarderType = 125;</code>
     */
    retarderType(125),
    /**
     * <code>retarderConMethod = 126;</code>
     */
    retarderConMethod(126),
    /**
     * <code>retarderSpIdlePoint1 = 127;</code>
     */
    retarderSpIdlePoint1(127),
    /**
     * <code>retarderPerTorIdle = 128;</code>
     */
    retarderPerTorIdle(128),
    /**
     * <code>maxRetSpeedPoint2 = 129;</code>
     */
    maxRetSpeedPoint2(129),
    /**
     * <code>retPerTorMaxSpeedPoint2 = 130;</code>
     */
    retPerTorMaxSpeedPoint2(130),
    /**
     * <code>engSpeedPoint3 = 131;</code>
     */
    engSpeedPoint3(131),
    /**
     * <code>retarderPerTorPoint3 = 132;</code>
     */
    retarderPerTorPoint3(132),
    /**
     * <code>engSpeedPoint4 = 133;</code>
     */
    engSpeedPoint4(133),
    /**
     * <code>retarderPerTorPoint4 = 134;</code>
     */
    retarderPerTorPoint4(134),
    /**
     * <code>retSpeedTorPoint5 = 135;</code>
     */
    retSpeedTorPoint5(135),
    /**
     * <code>refRetarTorque = 136;</code>
     */
    refRetarTorque(136),
    /**
     * <code>retarderPerTorPoint5 = 137;</code>
     */
    retarderPerTorPoint5(137),
    /**
     * <code>extendCrankcase = 138;</code>
     */
    extendCrankcase(138),
    /**
     * <code>engineInterTemper = 139;</code>
     */
    engineInterTemper(139),
    /**
     * <code>batteryPotInput1 = 140;</code>
     */
    batteryPotInput1(140),
    /**
     * <code>P2HighestSpeed = 141;</code>
     */
    P2HighestSpeed(141),
    /**
     * <code>P2PercentTorSpeed = 142;</code>
     */
    P2PercentTorSpeed(142),
    /**
     * <code>TripDistanceDD = 143;</code>
     */
    TripDistanceDD(143),
    /**
     * <code>mileageDD = 144;</code>
     */
    mileageDD(144),
    /**
     * <code>lng1Gross = 145;</code>
     */
    lng1Gross(145),
    /**
     * <code>lng1Surplus = 146;</code>
     */
    lng1Surplus(146),
    /**
     * <code>lng2Gross = 147;</code>
     */
    lng2Gross(147),
    /**
     * <code>lng2Surplus = 148;</code>
     */
    lng2Surplus(148),
    /**
     * <code>lng3Gross = 149;</code>
     */
    lng3Gross(149),
    /**
     * <code>lng3Surplus = 150;</code>
     */
    lng3Surplus(150),
    /**
     * <code>lng4Gross = 151;</code>
     */
    lng4Gross(151),
    /**
     * <code>lng4Surplus = 152;</code>
     */
    lng4Surplus(152),
    /**
     * <code>p2Speed = 153;</code>
     */
    p2Speed(153),
    /**
     * <code>p2Torque = 154;</code>
     */
    p2Torque(154),
    /**
     * <code>ureaConcentration = 155;</code>
     */
    ureaConcentration(155),
    /**
     * <code>integralFuelConsumption = 156;</code>
     */
    integralFuelConsumption(156),
    /**
     * <code>protectLamp = 157;</code>
     */
    protectLamp(157),
    /**
     * <code>stopLamp = 159;</code>
     */
    stopLamp(159),
    /**
     * <code>milLamp = 161;</code>
     */
    milLamp(161),
    /**
     * <code>scrLamp = 162;</code>
     */
    scrLamp(162),
    /**
     * <code>amberWarningLamp = 163;</code>
     */
    amberWarningLamp(163),
    /**
     * <code>differentialMileage = 164;</code>
     */
    differentialMileage(164),
    /**
     * <code>circleType = 165;</code>
     */
    circleType(165),
    /**
     * <code>roteSpeed = 166;</code>
     */
    roteSpeed(166),
    /**
     * <code>forewardCount = 167;</code>
     */
    forewardCount(167),
    /**
     * <code>reverseCount = 168;</code>
     */
    reverseCount(168),
    /**
     * <code>avgGasConsumption = 169;</code>
     */
    avgGasConsumption(169),
    /**
     * <code>totalGasConsumption = 170;</code>
     */
    totalGasConsumption(170),
    /**
     * <code>integralGasConsumption = 171;</code>
     */
    integralGasConsumption(171),
    /**
     * <code>actualPumpState = 172;</code>
     */
    actualPumpState(172),
    /**
     * <code>dynamicLoad = 173;</code>
     */
    dynamicLoad(173),
    /**
     * <code>lampState = 174;</code>
     */
    lampState(174),
    /**
     * <code>integralMileage = 175;</code>
     */
    integralMileage(175),
    /**
     * <code>integralOilConsumption = 177;</code>
     */
    integralOilConsumption(177),
    /**
     * <code>targetGear = 178;</code>
     */
    targetGear(178),
    /**
     * <code>realSpeedRatio = 179;</code>
     */
    realSpeedRatio(179),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>dpFirst = 0;</code>
     */
    public static final int dpFirst_VALUE = 0;
    /**
     * <code>dpfPressure = 1;</code>
     */
    public static final int dpfPressure_VALUE = 1;
    /**
     * <code>relativePressure = 2;</code>
     */
    public static final int relativePressure_VALUE = 2;
    /**
     * <code>intakeAirTem = 3;</code>
     */
    public static final int intakeAirTem_VALUE = 3;
    /**
     * <code>absolutePressure = 4;</code>
     */
    public static final int absolutePressure_VALUE = 4;
    /**
     * <code>exhaustTem = 5;</code>
     */
    public static final int exhaustTem_VALUE = 5;
    /**
     * <code>atmosphericPressure = 6;</code>
     */
    public static final int atmosphericPressure_VALUE = 6;
    /**
     * <code>engineTem = 7;</code>
     */
    public static final int engineTem_VALUE = 7;
    /**
     * <code>atmosphericTem = 8;</code>
     */
    public static final int atmosphericTem_VALUE = 8;
    /**
     * <code>pavementTem = 9;</code>
     */
    public static final int pavementTem_VALUE = 9;
    /**
     * <code>lampStatus = 10;</code>
     */
    public static final int lampStatus_VALUE = 10;
    /**
     * <code>mileage = 11;</code>
     */
    public static final int mileage_VALUE = 11;
    /**
     * <code>waterInOilStatus = 12;</code>
     */
    public static final int waterInOilStatus_VALUE = 12;
    /**
     * <code>oilValue = 14;</code>
     */
    public static final int oilValue_VALUE = 14;
    /**
     * <code>rotation = 15;</code>
     */
    public static final int rotation_VALUE = 15;
    /**
     * <code>fuelPressure = 16;</code>
     */
    public static final int fuelPressure_VALUE = 16;
    /**
     * <code>oilLevel = 17;</code>
     */
    public static final int oilLevel_VALUE = 17;
    /**
     * <code>oilPressure = 18;</code>
     */
    public static final int oilPressure_VALUE = 18;
    /**
     * <code>coolantLevel = 19;</code>
     */
    public static final int coolantLevel_VALUE = 19;
    /**
     * <code>coolingWaterTem = 20;</code>
     */
    public static final int coolingWaterTem_VALUE = 20;
    /**
     * <code>fuelTem = 21;</code>
     */
    public static final int fuelTem_VALUE = 21;
    /**
     * <code>oilTem = 22;</code>
     */
    public static final int oilTem_VALUE = 22;
    /**
     * <code>ureaTankLiquidLevel = 23;</code>
     */
    public static final int ureaTankLiquidLevel_VALUE = 23;
    /**
     * <code>ureaTankTem = 24;</code>
     */
    public static final int ureaTankTem_VALUE = 24;
    /**
     * <code>cumulativeRunningTime = 25;</code>
     */
    public static final int cumulativeRunningTime_VALUE = 25;
    /**
     * <code>cumulativeTurningNumber = 26;</code>
     */
    public static final int cumulativeTurningNumber_VALUE = 26;
    /**
     * <code>fuelConsumptionRate = 27;</code>
     */
    public static final int fuelConsumptionRate_VALUE = 27;
    /**
     * <code>averageFuelConsumption = 28;</code>
     */
    public static final int averageFuelConsumption_VALUE = 28;
    /**
     * <code>dayFuelConsumption = 29;</code>
     */
    public static final int dayFuelConsumption_VALUE = 29;
    /**
     * <code>totalFuelConsumption = 30;</code>
     */
    public static final int totalFuelConsumption_VALUE = 30;
    /**
     * <code>engineTorMode = 31;</code>
     */
    public static final int engineTorMode_VALUE = 31;
    /**
     * <code>driverEnginePercentTor = 32;</code>
     */
    public static final int driverEnginePercentTor_VALUE = 32;
    /**
     * <code>actualEnginePercentTor = 33;</code>
     */
    public static final int actualEnginePercentTor_VALUE = 33;
    /**
     * <code>accPedalLowIdleSwitch = 34;</code>
     */
    public static final int accPedalLowIdleSwitch_VALUE = 34;
    /**
     * <code>accPedalKickdownSwitch = 35;</code>
     */
    public static final int accPedalKickdownSwitch_VALUE = 35;
    /**
     * <code>accPedalPos = 36;</code>
     */
    public static final int accPedalPos_VALUE = 36;
    /**
     * <code>percentLoadAtCurrentSpd = 37;</code>
     */
    public static final int percentLoadAtCurrentSpd_VALUE = 37;
    /**
     * <code>nominalFrictionPercentTrq = 38;</code>
     */
    public static final int nominalFrictionPercentTrq_VALUE = 38;
    /**
     * <code>parkingBrakeSwitch = 39;</code>
     */
    public static final int parkingBrakeSwitch_VALUE = 39;
    /**
     * <code>cruiseCtrlActive = 40;</code>
     */
    public static final int cruiseCtrlActive_VALUE = 40;
    /**
     * <code>brakeSwitch = 41;</code>
     */
    public static final int brakeSwitch_VALUE = 41;
    /**
     * <code>clutchSwitch = 42;</code>
     */
    public static final int clutchSwitch_VALUE = 42;
    /**
     * <code>cruiseCtrlSetSwitch = 43;</code>
     */
    public static final int cruiseCtrlSetSwitch_VALUE = 43;
    /**
     * <code>cruiseCtrlCoastSwitch = 44;</code>
     */
    public static final int cruiseCtrlCoastSwitch_VALUE = 44;
    /**
     * <code>cruiseCtrlResumeSwitch = 45;</code>
     */
    public static final int cruiseCtrlResumeSwitch_VALUE = 45;
    /**
     * <code>cruiseCtrlAccSwitch = 46;</code>
     */
    public static final int cruiseCtrlAccSwitch_VALUE = 46;
    /**
     * <code>cruiseCtrlSetSpd = 47;</code>
     */
    public static final int cruiseCtrlSetSpd_VALUE = 47;
    /**
     * <code>cruiseCtrlStates = 48;</code>
     */
    public static final int cruiseCtrlStates_VALUE = 48;
    /**
     * <code>tripDistance = 49;</code>
     */
    public static final int tripDistance_VALUE = 49;
    /**
     * <code>realTimeOilConsumption = 50;</code>
     */
    public static final int realTimeOilConsumption_VALUE = 50;
    /**
     * <code>wheelBasedVehicleSpd = 51;</code>
     */
    public static final int wheelBasedVehicleSpd_VALUE = 51;
    /**
     * <code>outPutRoateSpeed = 52;</code>
     */
    public static final int outPutRoateSpeed_VALUE = 52;
    /**
     * <code>tachographVehicleSpeed = 53;</code>
     */
    public static final int tachographVehicleSpeed_VALUE = 53;
    /**
     * <code>currentGear = 54;</code>
     */
    public static final int currentGear_VALUE = 54;
    /**
     * <code>tripFuel = 55;</code>
     */
    public static final int tripFuel_VALUE = 55;
    /**
     * <code>truboOilTem = 56;</code>
     */
    public static final int truboOilTem_VALUE = 56;
    /**
     * <code>batteryPot = 57;</code>
     */
    public static final int batteryPot_VALUE = 57;
    /**
     * <code>engineProtection = 58;</code>
     */
    public static final int engineProtection_VALUE = 58;
    /**
     * <code>P1Speed = 59;</code>
     */
    public static final int P1Speed_VALUE = 59;
    /**
     * <code>P1Torque = 60;</code>
     */
    public static final int P1Torque_VALUE = 60;
    /**
     * <code>P3Speed = 61;</code>
     */
    public static final int P3Speed_VALUE = 61;
    /**
     * <code>P3Torque = 62;</code>
     */
    public static final int P3Torque_VALUE = 62;
    /**
     * <code>P4Speed = 63;</code>
     */
    public static final int P4Speed_VALUE = 63;
    /**
     * <code>P4Troque = 64;</code>
     */
    public static final int P4Troque_VALUE = 64;
    /**
     * <code>P5Speed = 65;</code>
     */
    public static final int P5Speed_VALUE = 65;
    /**
     * <code>P5Torque = 66;</code>
     */
    public static final int P5Torque_VALUE = 66;
    /**
     * <code>P6Speed = 67;</code>
     */
    public static final int P6Speed_VALUE = 67;
    /**
     * <code>gainSpeed = 68;</code>
     */
    public static final int gainSpeed_VALUE = 68;
    /**
     * <code>RefEngineTorque = 69;</code>
     */
    public static final int RefEngineTorque_VALUE = 69;
    /**
     * <code>MaxSpeedLimit = 70;</code>
     */
    public static final int MaxSpeedLimit_VALUE = 70;
    /**
     * <code>MaxTimeLimit = 71;</code>
     */
    public static final int MaxTimeLimit_VALUE = 71;
    /**
     * <code>SpLowerLimit = 72;</code>
     */
    public static final int SpLowerLimit_VALUE = 72;
    /**
     * <code>SpUpperLimit = 73;</code>
     */
    public static final int SpUpperLimit_VALUE = 73;
    /**
     * <code>TorLowerLimit = 74;</code>
     */
    public static final int TorLowerLimit_VALUE = 74;
    /**
     * <code>TorUpperLimit = 75;</code>
     */
    public static final int TorUpperLimit_VALUE = 75;
    /**
     * <code>ReqSpUpperLimit = 76;</code>
     */
    public static final int ReqSpUpperLimit_VALUE = 76;
    /**
     * <code>MomentIner = 77;</code>
     */
    public static final int MomentIner_VALUE = 77;
    /**
     * <code>RelEngOilPressure = 78;</code>
     */
    public static final int RelEngOilPressure_VALUE = 78;
    /**
     * <code>engOilPreLow = 79;</code>
     */
    public static final int engOilPreLow_VALUE = 79;
    /**
     * <code>engCoolTem = 80;</code>
     */
    public static final int engCoolTem_VALUE = 80;
    /**
     * <code>StartHeartStat = 81;</code>
     */
    public static final int StartHeartStat_VALUE = 81;
    /**
     * <code>OBDLampStatus = 82;</code>
     */
    public static final int OBDLampStatus_VALUE = 82;
    /**
     * <code>ExOutput = 83;</code>
     */
    public static final int ExOutput_VALUE = 83;
    /**
     * <code>EsFanSp = 84;</code>
     */
    public static final int EsFanSp_VALUE = 84;
    /**
     * <code>FanDriState = 85;</code>
     */
    public static final int FanDriState_VALUE = 85;
    /**
     * <code>FanSpeed = 86;</code>
     */
    public static final int FanSpeed_VALUE = 86;
    /**
     * <code>airFilterPre = 87;</code>
     */
    public static final int airFilterPre_VALUE = 87;
    /**
     * <code>CoolDifferTem = 88;</code>
     */
    public static final int CoolDifferTem_VALUE = 88;
    /**
     * <code>AirInTem = 89;</code>
     */
    public static final int AirInTem_VALUE = 89;
    /**
     * <code>perTorResolution = 90;</code>
     */
    public static final int perTorResolution_VALUE = 90;
    /**
     * <code>addControlDevice = 91;</code>
     */
    public static final int addControlDevice_VALUE = 91;
    /**
     * <code>engineStartMode = 92;</code>
     */
    public static final int engineStartMode_VALUE = 92;
    /**
     * <code>engineDePerTor = 93;</code>
     */
    public static final int engineDePerTor_VALUE = 93;
    /**
     * <code>speedLimitStatus = 94;</code>
     */
    public static final int speedLimitStatus_VALUE = 94;
    /**
     * <code>reAccPosition = 95;</code>
     */
    public static final int reAccPosition_VALUE = 95;
    /**
     * <code>reAccPosition2 = 96;</code>
     */
    public static final int reAccPosition2_VALUE = 96;
    /**
     * <code>maxAvailableEngPerTor = 97;</code>
     */
    public static final int maxAvailableEngPerTor_VALUE = 97;
    /**
     * <code>desirOperaSpeed = 98;</code>
     */
    public static final int desirOperaSpeed_VALUE = 98;
    /**
     * <code>engAsyAdjust = 99;</code>
     */
    public static final int engAsyAdjust_VALUE = 99;
    /**
     * <code>EstimaParLoss = 100;</code>
     */
    public static final int EstimaParLoss_VALUE = 100;
    /**
     * <code>exhGasMassflow = 101;</code>
     */
    public static final int exhGasMassflow_VALUE = 101;
    /**
     * <code>af1Intake = 102;</code>
     */
    public static final int af1Intake_VALUE = 102;
    /**
     * <code>af1Exhaust = 103;</code>
     */
    public static final int af1Exhaust_VALUE = 103;
    /**
     * <code>af2Intake = 104;</code>
     */
    public static final int af2Intake_VALUE = 104;
    /**
     * <code>af2Exhaust = 105;</code>
     */
    public static final int af2Exhaust_VALUE = 105;
    /**
     * <code>cruPauseSwitch = 106;</code>
     */
    public static final int cruPauseSwitch_VALUE = 106;
    /**
     * <code>cruiControlEnable = 107;</code>
     */
    public static final int cruiControlEnable_VALUE = 107;
    /**
     * <code>ptoState = 108;</code>
     */
    public static final int ptoState_VALUE = 108;
    /**
     * <code>engShutOverSwitch = 109;</code>
     */
    public static final int engShutOverSwitch_VALUE = 109;
    /**
     * <code>engTestModeWwitch = 110;</code>
     */
    public static final int engTestModeWwitch_VALUE = 110;
    /**
     * <code>engIdleDecSwitch = 111;</code>
     */
    public static final int engIdleDecSwitch_VALUE = 111;
    /**
     * <code>engIdleIncSwitch = 112;</code>
     */
    public static final int engIdleIncSwitch_VALUE = 112;
    /**
     * <code>retarTorMode = 113;</code>
     */
    public static final int retarTorMode_VALUE = 113;
    /**
     * <code>retBrakeAssSwitch = 114;</code>
     */
    public static final int retBrakeAssSwitch_VALUE = 114;
    /**
     * <code>retShiftAssSwitch = 115;</code>
     */
    public static final int retShiftAssSwitch_VALUE = 115;
    /**
     * <code>actRetTorPer = 116;</code>
     */
    public static final int actRetTorPer_VALUE = 116;
    /**
     * <code>intRetPerTor = 117;</code>
     */
    public static final int intRetPerTor_VALUE = 117;
    /**
     * <code>coolLoadIncrease = 118;</code>
     */
    public static final int coolLoadIncrease_VALUE = 118;
    /**
     * <code>retReqBrakeLight = 119;</code>
     */
    public static final int retReqBrakeLight_VALUE = 119;
    /**
     * <code>addOfControDevice = 120;</code>
     */
    public static final int addOfControDevice_VALUE = 120;
    /**
     * <code>demRetPerTor = 121;</code>
     */
    public static final int demRetPerTor_VALUE = 121;
    /**
     * <code>retSwitchPerTor = 122;</code>
     */
    public static final int retSwitchPerTor_VALUE = 122;
    /**
     * <code>actMaxAvailableRetPerTor = 123;</code>
     */
    public static final int actMaxAvailableRetPerTor_VALUE = 123;
    /**
     * <code>retarderLocation = 124;</code>
     */
    public static final int retarderLocation_VALUE = 124;
    /**
     * <code>retarderType = 125;</code>
     */
    public static final int retarderType_VALUE = 125;
    /**
     * <code>retarderConMethod = 126;</code>
     */
    public static final int retarderConMethod_VALUE = 126;
    /**
     * <code>retarderSpIdlePoint1 = 127;</code>
     */
    public static final int retarderSpIdlePoint1_VALUE = 127;
    /**
     * <code>retarderPerTorIdle = 128;</code>
     */
    public static final int retarderPerTorIdle_VALUE = 128;
    /**
     * <code>maxRetSpeedPoint2 = 129;</code>
     */
    public static final int maxRetSpeedPoint2_VALUE = 129;
    /**
     * <code>retPerTorMaxSpeedPoint2 = 130;</code>
     */
    public static final int retPerTorMaxSpeedPoint2_VALUE = 130;
    /**
     * <code>engSpeedPoint3 = 131;</code>
     */
    public static final int engSpeedPoint3_VALUE = 131;
    /**
     * <code>retarderPerTorPoint3 = 132;</code>
     */
    public static final int retarderPerTorPoint3_VALUE = 132;
    /**
     * <code>engSpeedPoint4 = 133;</code>
     */
    public static final int engSpeedPoint4_VALUE = 133;
    /**
     * <code>retarderPerTorPoint4 = 134;</code>
     */
    public static final int retarderPerTorPoint4_VALUE = 134;
    /**
     * <code>retSpeedTorPoint5 = 135;</code>
     */
    public static final int retSpeedTorPoint5_VALUE = 135;
    /**
     * <code>refRetarTorque = 136;</code>
     */
    public static final int refRetarTorque_VALUE = 136;
    /**
     * <code>retarderPerTorPoint5 = 137;</code>
     */
    public static final int retarderPerTorPoint5_VALUE = 137;
    /**
     * <code>extendCrankcase = 138;</code>
     */
    public static final int extendCrankcase_VALUE = 138;
    /**
     * <code>engineInterTemper = 139;</code>
     */
    public static final int engineInterTemper_VALUE = 139;
    /**
     * <code>batteryPotInput1 = 140;</code>
     */
    public static final int batteryPotInput1_VALUE = 140;
    /**
     * <code>P2HighestSpeed = 141;</code>
     */
    public static final int P2HighestSpeed_VALUE = 141;
    /**
     * <code>P2PercentTorSpeed = 142;</code>
     */
    public static final int P2PercentTorSpeed_VALUE = 142;
    /**
     * <code>TripDistanceDD = 143;</code>
     */
    public static final int TripDistanceDD_VALUE = 143;
    /**
     * <code>mileageDD = 144;</code>
     */
    public static final int mileageDD_VALUE = 144;
    /**
     * <code>lng1Gross = 145;</code>
     */
    public static final int lng1Gross_VALUE = 145;
    /**
     * <code>lng1Surplus = 146;</code>
     */
    public static final int lng1Surplus_VALUE = 146;
    /**
     * <code>lng2Gross = 147;</code>
     */
    public static final int lng2Gross_VALUE = 147;
    /**
     * <code>lng2Surplus = 148;</code>
     */
    public static final int lng2Surplus_VALUE = 148;
    /**
     * <code>lng3Gross = 149;</code>
     */
    public static final int lng3Gross_VALUE = 149;
    /**
     * <code>lng3Surplus = 150;</code>
     */
    public static final int lng3Surplus_VALUE = 150;
    /**
     * <code>lng4Gross = 151;</code>
     */
    public static final int lng4Gross_VALUE = 151;
    /**
     * <code>lng4Surplus = 152;</code>
     */
    public static final int lng4Surplus_VALUE = 152;
    /**
     * <code>p2Speed = 153;</code>
     */
    public static final int p2Speed_VALUE = 153;
    /**
     * <code>p2Torque = 154;</code>
     */
    public static final int p2Torque_VALUE = 154;
    /**
     * <code>ureaConcentration = 155;</code>
     */
    public static final int ureaConcentration_VALUE = 155;
    /**
     * <code>integralFuelConsumption = 156;</code>
     */
    public static final int integralFuelConsumption_VALUE = 156;
    /**
     * <code>protectLamp = 157;</code>
     */
    public static final int protectLamp_VALUE = 157;
    /**
     * <code>stopLamp = 159;</code>
     */
    public static final int stopLamp_VALUE = 159;
    /**
     * <code>milLamp = 161;</code>
     */
    public static final int milLamp_VALUE = 161;
    /**
     * <code>scrLamp = 162;</code>
     */
    public static final int scrLamp_VALUE = 162;
    /**
     * <code>amberWarningLamp = 163;</code>
     */
    public static final int amberWarningLamp_VALUE = 163;
    /**
     * <code>differentialMileage = 164;</code>
     */
    public static final int differentialMileage_VALUE = 164;
    /**
     * <code>circleType = 165;</code>
     */
    public static final int circleType_VALUE = 165;
    /**
     * <code>roteSpeed = 166;</code>
     */
    public static final int roteSpeed_VALUE = 166;
    /**
     * <code>forewardCount = 167;</code>
     */
    public static final int forewardCount_VALUE = 167;
    /**
     * <code>reverseCount = 168;</code>
     */
    public static final int reverseCount_VALUE = 168;
    /**
     * <code>avgGasConsumption = 169;</code>
     */
    public static final int avgGasConsumption_VALUE = 169;
    /**
     * <code>totalGasConsumption = 170;</code>
     */
    public static final int totalGasConsumption_VALUE = 170;
    /**
     * <code>integralGasConsumption = 171;</code>
     */
    public static final int integralGasConsumption_VALUE = 171;
    /**
     * <code>actualPumpState = 172;</code>
     */
    public static final int actualPumpState_VALUE = 172;
    /**
     * <code>dynamicLoad = 173;</code>
     */
    public static final int dynamicLoad_VALUE = 173;
    /**
     * <code>lampState = 174;</code>
     */
    public static final int lampState_VALUE = 174;
    /**
     * <code>integralMileage = 175;</code>
     */
    public static final int integralMileage_VALUE = 175;
    /**
     * <code>integralOilConsumption = 177;</code>
     */
    public static final int integralOilConsumption_VALUE = 177;
    /**
     * <code>targetGear = 178;</code>
     */
    public static final int targetGear_VALUE = 178;
    /**
     * <code>realSpeedRatio = 179;</code>
     */
    public static final int realSpeedRatio_VALUE = 179;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static StatusType valueOf(int value) {
      return forNumber(value);
    }

    public static StatusType forNumber(int value) {
      switch (value) {
        case 0: return dpFirst;
        case 1: return dpfPressure;
        case 2: return relativePressure;
        case 3: return intakeAirTem;
        case 4: return absolutePressure;
        case 5: return exhaustTem;
        case 6: return atmosphericPressure;
        case 7: return engineTem;
        case 8: return atmosphericTem;
        case 9: return pavementTem;
        case 10: return lampStatus;
        case 11: return mileage;
        case 12: return waterInOilStatus;
        case 14: return oilValue;
        case 15: return rotation;
        case 16: return fuelPressure;
        case 17: return oilLevel;
        case 18: return oilPressure;
        case 19: return coolantLevel;
        case 20: return coolingWaterTem;
        case 21: return fuelTem;
        case 22: return oilTem;
        case 23: return ureaTankLiquidLevel;
        case 24: return ureaTankTem;
        case 25: return cumulativeRunningTime;
        case 26: return cumulativeTurningNumber;
        case 27: return fuelConsumptionRate;
        case 28: return averageFuelConsumption;
        case 29: return dayFuelConsumption;
        case 30: return totalFuelConsumption;
        case 31: return engineTorMode;
        case 32: return driverEnginePercentTor;
        case 33: return actualEnginePercentTor;
        case 34: return accPedalLowIdleSwitch;
        case 35: return accPedalKickdownSwitch;
        case 36: return accPedalPos;
        case 37: return percentLoadAtCurrentSpd;
        case 38: return nominalFrictionPercentTrq;
        case 39: return parkingBrakeSwitch;
        case 40: return cruiseCtrlActive;
        case 41: return brakeSwitch;
        case 42: return clutchSwitch;
        case 43: return cruiseCtrlSetSwitch;
        case 44: return cruiseCtrlCoastSwitch;
        case 45: return cruiseCtrlResumeSwitch;
        case 46: return cruiseCtrlAccSwitch;
        case 47: return cruiseCtrlSetSpd;
        case 48: return cruiseCtrlStates;
        case 49: return tripDistance;
        case 50: return realTimeOilConsumption;
        case 51: return wheelBasedVehicleSpd;
        case 52: return outPutRoateSpeed;
        case 53: return tachographVehicleSpeed;
        case 54: return currentGear;
        case 55: return tripFuel;
        case 56: return truboOilTem;
        case 57: return batteryPot;
        case 58: return engineProtection;
        case 59: return P1Speed;
        case 60: return P1Torque;
        case 61: return P3Speed;
        case 62: return P3Torque;
        case 63: return P4Speed;
        case 64: return P4Troque;
        case 65: return P5Speed;
        case 66: return P5Torque;
        case 67: return P6Speed;
        case 68: return gainSpeed;
        case 69: return RefEngineTorque;
        case 70: return MaxSpeedLimit;
        case 71: return MaxTimeLimit;
        case 72: return SpLowerLimit;
        case 73: return SpUpperLimit;
        case 74: return TorLowerLimit;
        case 75: return TorUpperLimit;
        case 76: return ReqSpUpperLimit;
        case 77: return MomentIner;
        case 78: return RelEngOilPressure;
        case 79: return engOilPreLow;
        case 80: return engCoolTem;
        case 81: return StartHeartStat;
        case 82: return OBDLampStatus;
        case 83: return ExOutput;
        case 84: return EsFanSp;
        case 85: return FanDriState;
        case 86: return FanSpeed;
        case 87: return airFilterPre;
        case 88: return CoolDifferTem;
        case 89: return AirInTem;
        case 90: return perTorResolution;
        case 91: return addControlDevice;
        case 92: return engineStartMode;
        case 93: return engineDePerTor;
        case 94: return speedLimitStatus;
        case 95: return reAccPosition;
        case 96: return reAccPosition2;
        case 97: return maxAvailableEngPerTor;
        case 98: return desirOperaSpeed;
        case 99: return engAsyAdjust;
        case 100: return EstimaParLoss;
        case 101: return exhGasMassflow;
        case 102: return af1Intake;
        case 103: return af1Exhaust;
        case 104: return af2Intake;
        case 105: return af2Exhaust;
        case 106: return cruPauseSwitch;
        case 107: return cruiControlEnable;
        case 108: return ptoState;
        case 109: return engShutOverSwitch;
        case 110: return engTestModeWwitch;
        case 111: return engIdleDecSwitch;
        case 112: return engIdleIncSwitch;
        case 113: return retarTorMode;
        case 114: return retBrakeAssSwitch;
        case 115: return retShiftAssSwitch;
        case 116: return actRetTorPer;
        case 117: return intRetPerTor;
        case 118: return coolLoadIncrease;
        case 119: return retReqBrakeLight;
        case 120: return addOfControDevice;
        case 121: return demRetPerTor;
        case 122: return retSwitchPerTor;
        case 123: return actMaxAvailableRetPerTor;
        case 124: return retarderLocation;
        case 125: return retarderType;
        case 126: return retarderConMethod;
        case 127: return retarderSpIdlePoint1;
        case 128: return retarderPerTorIdle;
        case 129: return maxRetSpeedPoint2;
        case 130: return retPerTorMaxSpeedPoint2;
        case 131: return engSpeedPoint3;
        case 132: return retarderPerTorPoint3;
        case 133: return engSpeedPoint4;
        case 134: return retarderPerTorPoint4;
        case 135: return retSpeedTorPoint5;
        case 136: return refRetarTorque;
        case 137: return retarderPerTorPoint5;
        case 138: return extendCrankcase;
        case 139: return engineInterTemper;
        case 140: return batteryPotInput1;
        case 141: return P2HighestSpeed;
        case 142: return P2PercentTorSpeed;
        case 143: return TripDistanceDD;
        case 144: return mileageDD;
        case 145: return lng1Gross;
        case 146: return lng1Surplus;
        case 147: return lng2Gross;
        case 148: return lng2Surplus;
        case 149: return lng3Gross;
        case 150: return lng3Surplus;
        case 151: return lng4Gross;
        case 152: return lng4Surplus;
        case 153: return p2Speed;
        case 154: return p2Torque;
        case 155: return ureaConcentration;
        case 156: return integralFuelConsumption;
        case 157: return protectLamp;
        case 159: return stopLamp;
        case 161: return milLamp;
        case 162: return scrLamp;
        case 163: return amberWarningLamp;
        case 164: return differentialMileage;
        case 165: return circleType;
        case 166: return roteSpeed;
        case 167: return forewardCount;
        case 168: return reverseCount;
        case 169: return avgGasConsumption;
        case 170: return totalGasConsumption;
        case 171: return integralGasConsumption;
        case 172: return actualPumpState;
        case 173: return dynamicLoad;
        case 174: return lampState;
        case 175: return integralMileage;
        case 177: return integralOilConsumption;
        case 178: return targetGear;
        case 179: return realSpeedRatio;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<StatusType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        StatusType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<StatusType>() {
            public StatusType findValueByNumber(int number) {
              return StatusType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.wn.protocol.common.LCStatusType.getDescriptor().getEnumTypes().get(0);
    }

    private static final StatusType[] VALUES = values();

    public static StatusType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private StatusType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:StatusType)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\'core/proto/common/java/StatusType.prot" +
      "o*\341\033\n\nStatusType\022\013\n\007dpFirst\020\000\022\017\n\013dpfPres" +
      "sure\020\001\022\024\n\020relativePressure\020\002\022\020\n\014intakeAi" +
      "rTem\020\003\022\024\n\020absolutePressure\020\004\022\016\n\nexhaustT" +
      "em\020\005\022\027\n\023atmosphericPressure\020\006\022\r\n\tengineT" +
      "em\020\007\022\022\n\016atmosphericTem\020\010\022\017\n\013pavementTem\020" +
      "\t\022\016\n\nlampStatus\020\n\022\013\n\007mileage\020\013\022\024\n\020waterI" +
      "nOilStatus\020\014\022\014\n\010oilValue\020\016\022\014\n\010rotation\020\017" +
      "\022\020\n\014fuelPressure\020\020\022\014\n\010oilLevel\020\021\022\017\n\013oilP" +
      "ressure\020\022\022\020\n\014coolantLevel\020\023\022\023\n\017coolingWa",
      "terTem\020\024\022\013\n\007fuelTem\020\025\022\n\n\006oilTem\020\026\022\027\n\023ure" +
      "aTankLiquidLevel\020\027\022\017\n\013ureaTankTem\020\030\022\031\n\025c" +
      "umulativeRunningTime\020\031\022\033\n\027cumulativeTurn" +
      "ingNumber\020\032\022\027\n\023fuelConsumptionRate\020\033\022\032\n\026" +
      "averageFuelConsumption\020\034\022\026\n\022dayFuelConsu" +
      "mption\020\035\022\030\n\024totalFuelConsumption\020\036\022\021\n\ren" +
      "gineTorMode\020\037\022\032\n\026driverEnginePercentTor\020" +
      " \022\032\n\026actualEnginePercentTor\020!\022\031\n\025accPeda" +
      "lLowIdleSwitch\020\"\022\032\n\026accPedalKickdownSwit" +
      "ch\020#\022\017\n\013accPedalPos\020$\022\033\n\027percentLoadAtCu",
      "rrentSpd\020%\022\035\n\031nominalFrictionPercentTrq\020" +
      "&\022\026\n\022parkingBrakeSwitch\020\'\022\024\n\020cruiseCtrlA" +
      "ctive\020(\022\017\n\013brakeSwitch\020)\022\020\n\014clutchSwitch" +
      "\020*\022\027\n\023cruiseCtrlSetSwitch\020+\022\031\n\025cruiseCtr" +
      "lCoastSwitch\020,\022\032\n\026cruiseCtrlResumeSwitch" +
      "\020-\022\027\n\023cruiseCtrlAccSwitch\020.\022\024\n\020cruiseCtr" +
      "lSetSpd\020/\022\024\n\020cruiseCtrlStates\0200\022\020\n\014tripD" +
      "istance\0201\022\032\n\026realTimeOilConsumption\0202\022\030\n" +
      "\024wheelBasedVehicleSpd\0203\022\024\n\020outPutRoateSp" +
      "eed\0204\022\032\n\026tachographVehicleSpeed\0205\022\017\n\013cur",
      "rentGear\0206\022\014\n\010tripFuel\0207\022\017\n\013truboOilTem\020" +
      "8\022\016\n\nbatteryPot\0209\022\024\n\020engineProtection\020:\022" +
      "\013\n\007P1Speed\020;\022\014\n\010P1Torque\020<\022\013\n\007P3Speed\020=\022" +
      "\014\n\010P3Torque\020>\022\013\n\007P4Speed\020?\022\014\n\010P4Troque\020@" +
      "\022\013\n\007P5Speed\020A\022\014\n\010P5Torque\020B\022\013\n\007P6Speed\020C" +
      "\022\r\n\tgainSpeed\020D\022\023\n\017RefEngineTorque\020E\022\021\n\r" +
      "MaxSpeedLimit\020F\022\020\n\014MaxTimeLimit\020G\022\020\n\014SpL" +
      "owerLimit\020H\022\020\n\014SpUpperLimit\020I\022\021\n\rTorLowe" +
      "rLimit\020J\022\021\n\rTorUpperLimit\020K\022\023\n\017ReqSpUppe" +
      "rLimit\020L\022\016\n\nMomentIner\020M\022\025\n\021RelEngOilPre",
      "ssure\020N\022\020\n\014engOilPreLow\020O\022\016\n\nengCoolTem\020" +
      "P\022\022\n\016StartHeartStat\020Q\022\021\n\rOBDLampStatus\020R" +
      "\022\014\n\010ExOutput\020S\022\013\n\007EsFanSp\020T\022\017\n\013FanDriSta" +
      "te\020U\022\014\n\010FanSpeed\020V\022\020\n\014airFilterPre\020W\022\021\n\r" +
      "CoolDifferTem\020X\022\014\n\010AirInTem\020Y\022\024\n\020perTorR" +
      "esolution\020Z\022\024\n\020addControlDevice\020[\022\023\n\017eng" +
      "ineStartMode\020\\\022\022\n\016engineDePerTor\020]\022\024\n\020sp" +
      "eedLimitStatus\020^\022\021\n\rreAccPosition\020_\022\022\n\016r" +
      "eAccPosition2\020`\022\031\n\025maxAvailableEngPerTor" +
      "\020a\022\023\n\017desirOperaSpeed\020b\022\020\n\014engAsyAdjust\020",
      "c\022\021\n\rEstimaParLoss\020d\022\022\n\016exhGasMassflow\020e" +
      "\022\r\n\taf1Intake\020f\022\016\n\naf1Exhaust\020g\022\r\n\taf2In" +
      "take\020h\022\016\n\naf2Exhaust\020i\022\022\n\016cruPauseSwitch" +
      "\020j\022\025\n\021cruiControlEnable\020k\022\014\n\010ptoState\020l\022" +
      "\025\n\021engShutOverSwitch\020m\022\025\n\021engTestModeWwi" +
      "tch\020n\022\024\n\020engIdleDecSwitch\020o\022\024\n\020engIdleIn" +
      "cSwitch\020p\022\020\n\014retarTorMode\020q\022\025\n\021retBrakeA" +
      "ssSwitch\020r\022\025\n\021retShiftAssSwitch\020s\022\020\n\014act" +
      "RetTorPer\020t\022\020\n\014intRetPerTor\020u\022\024\n\020coolLoa" +
      "dIncrease\020v\022\024\n\020retReqBrakeLight\020w\022\025\n\021add",
      "OfControDevice\020x\022\020\n\014demRetPerTor\020y\022\023\n\017re" +
      "tSwitchPerTor\020z\022\034\n\030actMaxAvailableRetPer" +
      "Tor\020{\022\024\n\020retarderLocation\020|\022\020\n\014retarderT" +
      "ype\020}\022\025\n\021retarderConMethod\020~\022\030\n\024retarder" +
      "SpIdlePoint1\020\177\022\027\n\022retarderPerTorIdle\020\200\001\022" +
      "\026\n\021maxRetSpeedPoint2\020\201\001\022\034\n\027retPerTorMaxS" +
      "peedPoint2\020\202\001\022\023\n\016engSpeedPoint3\020\203\001\022\031\n\024re" +
      "tarderPerTorPoint3\020\204\001\022\023\n\016engSpeedPoint4\020" +
      "\205\001\022\031\n\024retarderPerTorPoint4\020\206\001\022\026\n\021retSpee" +
      "dTorPoint5\020\207\001\022\023\n\016refRetarTorque\020\210\001\022\031\n\024re",
      "tarderPerTorPoint5\020\211\001\022\024\n\017extendCrankcase" +
      "\020\212\001\022\026\n\021engineInterTemper\020\213\001\022\025\n\020batteryPo" +
      "tInput1\020\214\001\022\023\n\016P2HighestSpeed\020\215\001\022\026\n\021P2Per" +
      "centTorSpeed\020\216\001\022\023\n\016TripDistanceDD\020\217\001\022\016\n\t" +
      "mileageDD\020\220\001\022\016\n\tlng1Gross\020\221\001\022\020\n\013lng1Surp" +
      "lus\020\222\001\022\016\n\tlng2Gross\020\223\001\022\020\n\013lng2Surplus\020\224\001" +
      "\022\016\n\tlng3Gross\020\225\001\022\020\n\013lng3Surplus\020\226\001\022\016\n\tln" +
      "g4Gross\020\227\001\022\020\n\013lng4Surplus\020\230\001\022\014\n\007p2Speed\020" +
      "\231\001\022\r\n\010p2Torque\020\232\001\022\026\n\021ureaConcentration\020\233" +
      "\001\022\034\n\027integralFuelConsumption\020\234\001\022\020\n\013prote",
      "ctLamp\020\235\001\022\r\n\010stopLamp\020\237\001\022\014\n\007milLamp\020\241\001\022\014" +
      "\n\007scrLamp\020\242\001\022\025\n\020amberWarningLamp\020\243\001\022\030\n\023d" +
      "ifferentialMileage\020\244\001\022\017\n\ncircleType\020\245\001\022\016" +
      "\n\troteSpeed\020\246\001\022\022\n\rforewardCount\020\247\001\022\021\n\014re" +
      "verseCount\020\250\001\022\026\n\021avgGasConsumption\020\251\001\022\030\n" +
      "\023totalGasConsumption\020\252\001\022\033\n\026integralGasCo" +
      "nsumption\020\253\001\022\024\n\017actualPumpState\020\254\001\022\020\n\013dy" +
      "namicLoad\020\255\001\022\016\n\tlampState\020\256\001\022\024\n\017integral" +
      "Mileage\020\257\001\022\033\n\026integralOilConsumption\020\261\001\022" +
      "\017\n\ntargetGear\020\262\001\022\023\n\016realSpeedRatio\020\263\001B&\n",
      "\026com.wn.protocol.commonB\014LCStatusTypeb\006p" +
      "roto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
